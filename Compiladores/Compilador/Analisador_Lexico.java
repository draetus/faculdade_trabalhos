import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.ParserException;

/* Analisador_Lexico.java */
/* Generated By:JavaCC: Do not edit this line. Analisador_Lexico.java */
/** Simple brace matcher. */
public class Analisador_Lexico implements Analisador_LexicoConstants {
    
    
  public static String saida = "";  
  public Analisador_Lexico parser2;
  public Analisador_Lexico parser;
  public Tabela tabela = new Tabela();  
    
  public Analisador_Lexico()
  {
  }
    
  public ArrayList<Instrucao> run(String myString) throws ParseException {
    InputStream input = new ByteArrayInputStream( myString.getBytes() );
    InputStream input2 = new ByteArrayInputStream( myString.getBytes() );
    parser = new Analisador_Lexico(input);
    parser2 = new Analisador_Lexico(input2);
    Token token_aux;
    int erros=0;
    
    
    while (parser.getNextToken().kind != Analisador_Lexico.EOF)
    {
        token_aux = parser.token;
        switch(token_aux.kind)
        {
            case 55:
                saida += "'"+token_aux.toString() + "'   |   id: "+token_aux.kind+"   |   Categoria: "+ "Identificador Invalido" +"   |   Linha: "+token_aux.beginLine+"   |   Coluna: "+token_aux.beginColumn+" \n \n" ;
                erros++;
                break;
                
            case 50:
                saida += "'"+token_aux.toString() + "'   |   id: "+token_aux.kind+"   |   Categoria: "+ "Natural Invalido" +"   |   Linha: "+token_aux.beginLine+"   |   Coluna: "+token_aux.beginColumn+" \n \n" ;
                erros++;
                break;
                
            case 51:
                saida += "'"+token_aux.toString() + "'   |   id: "+token_aux.kind+"   |   Categoria: "+ "Real Invalido" +"   |   Linha: "+token_aux.beginLine+"   |   Coluna: "+token_aux.beginColumn+" \n \n" ;
                erros++;
                break;
                                
            case 49:
                saida += "'"+token_aux.toString() + "'   |   id: "+token_aux.kind+"   |   Categoria: "+ "Simbolo Invalido" +"   |   Linha: "+token_aux.beginLine+"   |   Coluna: "+token_aux.beginColumn+" \n \n" ;
                erros++;
                break;
        }
    }   

    if (erros<1)
    {
        parser.cleanSaida();
        try
        {
            parser2.Input();
        }
        catch(ParseException e )
        {
            System.out.println("ERRO");
            saida += e.getMessage() + "\n\n" ;
            parser2.getNextToken();
        }
    }
    
    if (saida.equals(""))
    {
        saida = "Compilado com sucesso!\n\n";
    }

    return parser2.tabela.area_instrucoes; 
  }

  public void cleanSaida(){
      Analisador_Lexico.saida = "";
  }


/** Root production. */
  final public void Input() throws ParseException {
    Programa();
  }

  final public void Programa() throws ParseException {
    Comentario();
    jj_consume_token(PR_PROGRAM);
    jj_consume_token(LBRACE);
    Declaracao_de_constantes_e_variaveis();
    Corpo_do_programa();
    jj_consume_token(RBRACE);
    Identificador_do_programa();
  }

  final public void Comentario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SE_COMENT:{
      jj_consume_token(SE_COMENT);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(LITERAL);
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void Identificador_do_programa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      Acao_semantica(1);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void Declaracao_de_constantes_e_variaveis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_DEFINE:{
      jj_consume_token(PR_DEFINE);
      jj_consume_token(LBRACE);
      Constantes_e_variaveis();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void Constantes_e_variaveis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      Declaracao_de_constantes();
      Variaveis2();
      break;
      }
    case PR_VARIABLE:{
      Declaracao_de_variaveis();
      Constantes2();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Declaracao_de_constantes() throws ParseException {
    jj_consume_token(60);
    Acao_semantica(2);
    Constantes();
  }

  final public void Constantes() throws ParseException {
    Tipo();
    jj_consume_token(PR_IS);
    Lista_de_identificadores_de_constantes();
    Acao_semantica(3);
    Valor();
    Acao_semantica(4);
    jj_consume_token(THEFIM);
    Constantes1();
  }

  final public void Constantes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_NATURAL:
    case PR_REAL:
    case PR_CHAR:
    case PR_BOOLEAN:{
      Constantes();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void Constantes2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      Declaracao_de_constantes();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void Declaracao_de_variaveis() throws ParseException {
    jj_consume_token(PR_VARIABLE);
    Acao_semantica(5);
    Variaveis();
  }

  final public void Variaveis() throws ParseException {
    Tipo();
    jj_consume_token(PR_IS);
    Lista_de_identificadores_de_variaveis();
    Acao_semantica(3);
    jj_consume_token(THEFIM);
    Variaveis1();
  }

  final public void Variaveis1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_NATURAL:
    case PR_REAL:
    case PR_CHAR:
    case PR_BOOLEAN:{
      Variaveis();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void Variaveis2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_VARIABLE:{
      Declaracao_de_variaveis();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_NATURAL:{
      jj_consume_token(PR_NATURAL);
      Acao_semantica(6);
      break;
      }
    case PR_REAL:{
      jj_consume_token(PR_REAL);
      Acao_semantica(7);
      break;
      }
    case PR_CHAR:{
      jj_consume_token(PR_CHAR);
      Acao_semantica(8);
      break;
      }
    case PR_BOOLEAN:{
      jj_consume_token(PR_BOOLEAN);
      Acao_semantica(9);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Lista_de_identificadores_de_constantes() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    Acao_semantica(10);
    Lista_de_identificadores_de_constantes1();
  }

  final public void Lista_de_identificadores_de_constantes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Lista_de_identificadores_de_constantes();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void Lista_de_identificadores_de_variaveis() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    Acao_semantica(11);
    Indice();
    Acao_semantica(12);
    Lista_de_identificadores_de_variaveis1();
  }

  final public void Lista_de_identificadores_de_variaveis1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Lista_de_identificadores_de_variaveis();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void Indice() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      jj_consume_token(NATURAL);
      Acao_semantica(13);
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void Valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NATURAL:{
      jj_consume_token(NATURAL);
      break;
      }
    case REAL:{
      jj_consume_token(REAL);
      break;
      }
    case LITERAL:{
      jj_consume_token(LITERAL);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Corpo_do_programa() throws ParseException {
    jj_consume_token(PR_EXECUTE);
    jj_consume_token(LBRACE);
    Lista_de_comandos();
    jj_consume_token(RBRACE);
  }

  final public void Lista_de_comandos() throws ParseException {
    Comando();
    jj_consume_token(THEFIM);
    Lista_de_comandos1();
  }

  final public void Lista_de_comandos1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_GET:
    case PR_SET:
    case PR_PUT:
    case PR_VERIFY:
    case PR_LOOP:
    case PR_WHILE:{
      Lista_de_comandos();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_SET:{
      Atribuicao();
      break;
      }
    case PR_GET:{
      Entrada();
      break;
      }
    case PR_PUT:{
      Saida();
      break;
      }
    case PR_VERIFY:{
      Selecao();
      break;
      }
    case PR_LOOP:
    case PR_WHILE:{
      Repeticao();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Atribuicao() throws ParseException {
    jj_consume_token(PR_SET);
    Acao_semantica(14);
    Expressao();
    jj_consume_token(PR_TO);
    Lista_de_identificadores_de_variaveis();
    Acao_semantica(15);
  }

  final public void Entrada() throws ParseException {
    jj_consume_token(PR_GET);
    Acao_semantica(16);
    jj_consume_token(LBRACE);
    Lista_de_identificadores_de_variaveis();
    jj_consume_token(RBRACE);
  }

  final public void Saida() throws ParseException {
    jj_consume_token(PR_PUT);
    jj_consume_token(LBRACE);
    Lista_de_identificadores_e_ou_constantes();
    jj_consume_token(RBRACE);
  }

  final public void Lista_de_identificadores_e_ou_constantes() throws ParseException {
    Item();
    Acao_semantica(17);
    Lista_de_identificadores_e_ou_constantes1();
  }

  final public void Lista_de_identificadores_e_ou_constantes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Lista_de_identificadores_e_ou_constantes();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void Item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      Acao_semantica(18);
      Indice();
      Acao_semantica(19);
      break;
      }
    case NATURAL:{
      jj_consume_token(NATURAL);
      Acao_semantica(20);
      break;
      }
    case REAL:{
      jj_consume_token(REAL);
      Acao_semantica(21);
      break;
      }
    case LITERAL:{
      jj_consume_token(LITERAL);
      Acao_semantica(22);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Selecao() throws ParseException {
    jj_consume_token(PR_VERIFY);
    Expressao();
    Clausulas();
    Acao_semantica(23);
  }

  final public void Clausulas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_IS_TRUE:{
      jj_consume_token(PR_IS_TRUE);
      Acao_semantica(24);
      jj_consume_token(LBRACE);
      Lista_de_comandos();
      jj_consume_token(RBRACE);
      Falsa();
      break;
      }
    case PR_IS_FALSE:{
      jj_consume_token(PR_IS_FALSE);
      Acao_semantica(25);
      jj_consume_token(LBRACE);
      Lista_de_comandos();
      jj_consume_token(RBRACE);
      Verdadeira();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Verdadeira() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_IS_TRUE:{
      jj_consume_token(PR_IS_TRUE);
      Acao_semantica(26);
      jj_consume_token(LBRACE);
      Lista_de_comandos();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void Falsa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_IS_FALSE:{
      jj_consume_token(PR_IS_FALSE);
      Acao_semantica(26);
      jj_consume_token(LBRACE);
      Lista_de_comandos();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void Repeticao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PR_LOOP:{
      jj_consume_token(PR_LOOP);
      Acao_semantica(27);
      jj_consume_token(LBRACE);
      Lista_de_comandos();
      jj_consume_token(RBRACE);
      jj_consume_token(PR_WHILE);
      Expressao();
      Acao_semantica(28);
      jj_consume_token(PR_IS_TRUE);
      break;
      }
    case PR_WHILE:{
      jj_consume_token(PR_WHILE);
      Acao_semantica(29);
      Expressao();
      Acao_semantica(30);
      jj_consume_token(61);
      jj_consume_token(LBRACE);
      Lista_de_comandos();
      jj_consume_token(RBRACE);
      Acao_semantica(31);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expressao() throws ParseException {
    Expressao_aritmetica_ou_logica();
    Expressao1();
  }

  final public void Expressao1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SE_LT:
    case SE_GT:
    case SE_LE:
    case SE_GE:
    case SE_NE:
    case SE_EQ:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SE_EQ:{
        jj_consume_token(SE_EQ);
        Expressao_aritmetica_ou_logica();
        Acao_semantica(32);
        break;
        }
      case SE_NE:{
        jj_consume_token(SE_NE);
        Expressao_aritmetica_ou_logica();
        Acao_semantica(33);
        break;
        }
      case SE_LT:{
        jj_consume_token(SE_LT);
        Expressao_aritmetica_ou_logica();
        Acao_semantica(34);
        break;
        }
      case SE_GT:{
        jj_consume_token(SE_GT);
        Expressao_aritmetica_ou_logica();
        Acao_semantica(35);
        break;
        }
      case SE_LE:{
        jj_consume_token(SE_LE);
        Expressao_aritmetica_ou_logica();
        Acao_semantica(36);
        break;
        }
      case SE_GE:{
        jj_consume_token(SE_GE);
        Expressao_aritmetica_ou_logica();
        Acao_semantica(37);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void Expressao_aritmetica_ou_logica() throws ParseException {
    Termo2();
    Menor_prioridade();
  }

  final public void Menor_prioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SE_PLUS:
    case SE_MIN:
    case SE_OR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SE_PLUS:{
        jj_consume_token(SE_PLUS);
        Termo2();
        Menor_prioridade();
        Acao_semantica(38);
        break;
        }
      case SE_MIN:{
        jj_consume_token(SE_MIN);
        Termo2();
        Menor_prioridade();
        Acao_semantica(39);
        break;
        }
      case SE_OR:{
        jj_consume_token(SE_OR);
        Termo2();
        Menor_prioridade();
        Acao_semantica(40);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void Termo2() throws ParseException {
    Termo1();
    Media_prioridade();
  }

  final public void Media_prioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SE_DIVI:
    case SE_MOD:
    case SE_AND:
    case SE_MULT:
    case SE_DIVR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SE_MULT:{
        jj_consume_token(SE_MULT);
        Termo1();
        Media_prioridade();
        Acao_semantica(41);
        break;
        }
      case SE_DIVR:{
        jj_consume_token(SE_DIVR);
        Termo1();
        Media_prioridade();
        Acao_semantica(42);
        break;
        }
      case SE_DIVI:{
        jj_consume_token(SE_DIVI);
        Termo1();
        Media_prioridade();
        Acao_semantica(43);
        break;
        }
      case SE_MOD:{
        jj_consume_token(SE_MOD);
        Termo1();
        Media_prioridade();
        Acao_semantica(44);
        break;
        }
      case SE_AND:{
        jj_consume_token(SE_AND);
        Termo1();
        Media_prioridade();
        Acao_semantica(45);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  final public void Termo1() throws ParseException {
    Elemento();
    Maior_prioridade();
  }

  final public void Maior_prioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SE_POW:{
      jj_consume_token(SE_POW);
      Elemento();
      Maior_prioridade();
      Acao_semantica(46);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void Elemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      Acao_semantica(18);
      Indice();
      Acao_semantica(19);
      break;
      }
    case NATURAL:{
      jj_consume_token(NATURAL);
      Acao_semantica(20);
      break;
      }
    case REAL:{
      jj_consume_token(REAL);
      Acao_semantica(21);
      break;
      }
    case LITERAL:{
      jj_consume_token(LITERAL);
      Acao_semantica(22);
      break;
      }
    case PR_TRUE:{
      jj_consume_token(PR_TRUE);
      Acao_semantica(47);
      break;
      }
    case PR_FALSE:{
      jj_consume_token(PR_FALSE);
      Acao_semantica(48);
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      Expressao();
      jj_consume_token(RBRACKET);
      break;
      }
    case SE_NOT:{
      jj_consume_token(SE_NOT);
      jj_consume_token(LBRACKET);
      Expressao();
      jj_consume_token(RBRACKET);
      Acao_semantica(49);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }


    final public void Acao_semantica(int acao) throws ParseException {
    Instrucao instrucao;
    int endereco1, endereco2;
    this.tabela.acao.add(acao);
    switch (acao)
                {
                        // reconhecimento do identificador de programa e de fim de programa
                        case(1):
                                tabela.tabela_simbolos.add(new Simbolo(token.toString(), 0, -1, -1));
                                tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "STP", String.valueOf(0)));
                                break;
                        
                        // reconhecimento da palavra reservada not variable
                        case(2):
                                tabela.contexto = "constante";
                                tabela.VIT = 0;
                                break;

                        case(3):
                                tabela.VP = tabela.VP + tabela.VIT;
                                
                                switch(tabela.tipo)
                                {
                                    case (1):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALI", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case (5):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALI", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case (2):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALR", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case (6):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALR", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case (3):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALS", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case (7):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALS", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case (4):
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "ALB", String.valueOf(tabela.VP)));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                    
                                    default:
                                        throw new ParseException("ERRO - SWITCH DEFAULT ACAO 3");
                                }
                                
                                if (tabela.tipo == 1 | tabela.tipo == 2 | tabela.tipo == 3 | tabela.tipo == 4)
                                {
                                    tabela.VP = 0;
                                    tabela.VIT = 0;
                                }
                                break;

                        case(4):
                                switch(tabela.tipo)
                                {
                                    case 5:
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "LDI", token.toString()));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case 6:
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "LDR", token.toString()));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                        
                                    case 7:
                                        tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "LDS", token.toString()));
                                        tabela.ponteiro = tabela.ponteiro + 1;
                                        break;
                                }
                                
                                tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "STC", String.valueOf(tabela.VP)));
                                tabela.ponteiro = tabela.ponteiro + 1;
                                tabela.VP = 0;
                                
                                break;

                        case(5):
                                tabela.contexto = "variavel";
                                break;

                        case(6):
                                if (tabela.contexto.equals("variavel"))
                                {
                                    tabela.tipo = 1;
                                }
                                else
                                {
                                    tabela.tipo = 5;
                                }
                                break;

                        case(7):
                                if (tabela.contexto.equals("variavel"))
                                {
                                    tabela.tipo = 2;
                                }
                                else
                                {
                                    tabela.tipo = 6;
                                }
                                break;

                        case(8):
                                if (tabela.contexto.equals("variavel"))
                                {
                                    tabela.tipo = 3;
                                }
                                else
                                {
                                    tabela.tipo = 7;
                                }
                                break;

                        case(9):
                                if (tabela.contexto.equals("variavel"))
                                {
                                    tabela.tipo = 4;
                                }
                                else
                                {
                                    saida += "Erro: tipo invalido para constante | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                }
                                break;

                        case(10):
                                if (tabela.ExisteIdentificar(token.toString()))
                                {
                                    saida += "Erro: identificador já declarado | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                }
                                else
                                {
                                    tabela.VT = tabela.VT + 1;
                                    tabela.VP = tabela.VP + 1;
                                    tabela.tabela_simbolos.add(new Simbolo(token.toString(), tabela.tipo, tabela.VT, -1));
                                }
                                break;

                        case(11):
                                if (tabela.contexto.equals("variavel"))
                                {
                                    if (tabela.ExisteIdentificar(token.toString()))
                                    {
                                           saida += "Erro: identificador já declarado | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                    }
                                    else
                                    {
                                        tabela.variavel_indexada = false;
                                        tabela.aux[11] = token.toString();
                                    }
                                }
                                else
                                {
                                    tabela.variavel_indexada = false;
                                    tabela.aux[11] = token.toString();
                                }
                                break;

                        case(12):
                                switch (tabela.contexto)
                                {
                                    case ("variavel"):
                                        if (tabela.variavel_indexada == false)
                                        {
                                            tabela.VT = tabela.VT + 1;
                                            tabela.VP = tabela.VP + 1;
                                            tabela.tabela_simbolos.add(new Simbolo(tabela.aux[11], tabela.tipo, tabela.VT, -1));
                                        }
                                        else
                                        {
                                            tabela.VIT = tabela.VIT + new Integer(tabela.aux[13]);
                                            tabela.tabela_simbolos.add(new Simbolo(tabela.aux[11], tabela.tipo, tabela.VT+1, new Integer(tabela.aux[13])));
                                            tabela.VT = tabela.VT + new Integer(tabela.aux[13]);
                                        }
                                        break;
                                        
                                    case ("atribuicao"):
                                        if (tabela.ExisteIdentificar(tabela.aux[11]) 
                                                && tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11])).categoria > 0
                                                && tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11])).categoria < 5)
                                        {
                                            tabela.tupla = tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11]));
                                            
                                            if (tabela.tupla.atributo2 == -1)
                                            {
                                                if (tabela.variavel_indexada == false)
                                                {
                                                    tabela.lista_atributos.add(tabela.tupla.atributo1);
                                                }
                                                else
                                                {
                                                    saida += "Erro:  identificador de variável não indexada | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                                }
                                            }
                                            else
                                            {
                                                if (tabela.variavel_indexada == true)
                                                {
                                                    tabela.lista_atributos.add(tabela.tupla.atributo1 + new Integer(tabela.aux[13]) - 1);
                                                }
                                                else
                                                {
                                                    saida += "Erro: identificador de variável indexada exige índice | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            saida += "Erro: identificador não declarado ou de constante | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                        }
                                        break;
                                        
                                    case ("entrada dados"):
                                        if (tabela.ExisteIdentificar(tabela.aux[11]) 
                                                && tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11])).categoria > 0
                                                && tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11])).categoria < 5)
                                        {
                                            tabela.tupla = tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11]));
                                            if (tabela.tupla.atributo2 == -1)
                                            {
                                                if (tabela.variavel_indexada == false)
                                                {
                                                    tabela.tupla = tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11]));
                                                    tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "REA", String.valueOf(tabela.tupla.categoria)));
                                                    tabela.ponteiro = tabela.ponteiro + 1;
                                                    tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "STR", String.valueOf(tabela.tupla.atributo1)));
                                                    tabela.ponteiro = tabela.ponteiro + 1;
                                                }
                                                else
                                                {
                                                    saida += "Erro: identificador de variável não indexada | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                                }
                                            }
                                            else
                                            {
                                                if (tabela.variavel_indexada == true)
                                                {
                                                    tabela.tupla = tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[11]));
                                                    tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "REA", String.valueOf(tabela.tupla.categoria)));
                                                    tabela.ponteiro = tabela.ponteiro + 1;
                                                    tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "STR", String.valueOf(tabela.tupla.atributo1 + new Integer(tabela.aux[13]) - 1)));
                                                    tabela.ponteiro = tabela.ponteiro + 1;
                                                }
                                                else
                                                {
                                                    saida += "Erro: identificador de variável indexada exige índice | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            saida += "Erro: identificador não declarado ou de constante | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                        }
                                }
                               

                        case(13):
                                tabela.aux[13] = token.toString();
                                tabela.variavel_indexada = true; // ARRUMADO
                                break;

                        case(14):
                                tabela.contexto = "atribuicao";
                                break;

                        case(15):
                                for (int atr: tabela.lista_atributos)
                                {
                                    tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "STR", String.valueOf(atr)));
                                    tabela.ponteiro = tabela.ponteiro + 1;
                                }
                                tabela.lista_atributos.clear();
                                
                                break;

                        case(16):
                                tabela.contexto = "entrada dados";
                                break;

                        case(17):
                                tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "WRT", String.valueOf(0)));
                                tabela.ponteiro = tabela.ponteiro + 1;
                                break;

                        case(18):
                                if (tabela.ExisteIdentificar(token.toString())
                                        && tabela.tabela_simbolos.get(tabela.indexIdentificador(token.toString())).categoria > 0
                                        && tabela.tabela_simbolos.get(tabela.indexIdentificador(token.toString())).categoria < 8)
                                {
                                    tabela.variavel_indexada = false;
                                    tabela.aux[18] = token.toString();
                                }
                                else
                                {
                                    saida += "Erro: identificador não declarado | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                }
                                break;

                        case(19):
                                if (tabela.ExisteIdentificar(tabela.aux[18]))
                                {
                                    tabela.tupla = tabela.tabela_simbolos.get(tabela.indexIdentificador(tabela.aux[18]));
                                
                                    if (tabela.variavel_indexada == false)
                                    {
                                        if (tabela.tupla.atributo2 == -1)
                                        {
                                            tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "LDV", String.valueOf(tabela.tupla.atributo1)));
                                            tabela.ponteiro = tabela.ponteiro + 1;
                                        }
                                        else
                                        {
                                            saida += "Erro: identificador de variável indexada exige índice | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                        }
                                    }
                                    else
                                    {
                                        System.out.println("ENTROU");
                                        System.out.println(tabela.tupla.atributo2);
                                        if (tabela.tupla.atributo2 != -1)
                                        {
                                            tabela.area_instrucoes.add(new Instrucao(tabela.ponteiro, "LDV", String.valueOf(tabela.tupla.atributo1 + new Integer(tabela.aux[13]) - 1)));
                                            tabela.ponteiro = tabela.ponteiro + 1;
                                        }
                                        else
                                        {
                                            saida += "Erro: identificador de constante ou de variável não indexada | Linha: " + token.beginLine + " | Coluna: " + token.beginColumn + "\n\n";
                                        }
                                    }
                                }
                                break;

                        case(20):
                                //System.out.println("ACAO 20");
                                instrucao = new Instrucao(tabela.ponteiro, "LDI", token.toString());
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;
                                break;

                        case(21):
                                //System.out.println("ACAO 21");
                                instrucao = new Instrucao(tabela.ponteiro, "LDR", token.toString());
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;
                                break;

                        case(22):
                                //System.out.println("ACAO 22");
                                instrucao = new Instrucao(tabela.ponteiro, "LDS", token.toString());
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;
                                break;

                        case(23):
                                //System.out.println("ACAO 23");
                                endereco1 = tabela.pilha_desvios.get();
                                instrucao = tabela.area_instrucoes.get(endereco1-1);
                                instrucao.parametro = String.valueOf(tabela.ponteiro);  
                                break;

                        case(24):
                                //System.out.println("ACAO 24");
                                instrucao = new Instrucao(tabela.ponteiro, "JMF", "?");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.pilha_desvios.add(tabela.ponteiro);
                                tabela.ponteiro++;
                                break;

                        case(25):
                                //System.out.println("ACAO 25");
                                instrucao = new Instrucao(tabela.ponteiro, "JMT", "?");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.pilha_desvios.add(tabela.ponteiro);
                                tabela.ponteiro++;
                                break;

                        case(26):
                                //System.out.println("ACAO 26");
                                tabela.area_instrucoes.get(tabela.pilha_desvios.get()-1).parametro = String.valueOf(tabela.ponteiro + 1);
                                instrucao = new Instrucao(tabela.ponteiro, "JMP", "?");
                                tabela.pilha_desvios.add(tabela.ponteiro);

                                tabela.area_instrucoes.add(instrucao);

                                tabela.ponteiro++;
                                break;

                        case(27):
                                //System.out.println("ACAO 27");
                                tabela.pilha_desvios.add(tabela.ponteiro);
                                break;
                        case(28):
                                //System.out.println("ACAO 28");
                                endereco1 = tabela.pilha_desvios.get();
                                instrucao = new Instrucao(tabela.ponteiro, "JMT", String.valueOf(endereco1-1));
                                tabela.ponteiro++;
                                break;

                        case(29):
                                //System.out.println("ACAO 29");
                                tabela.pilha_desvios.add(tabela.ponteiro);
                                break;

                        case(30):
                                //System.out.println("ACAO 30");
                                instrucao = new Instrucao(tabela.ponteiro, "JMF", "?");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.pilha_desvios.add(tabela.ponteiro);
                                tabela.ponteiro++;
                                break;

                        case(31):
                                //System.out.println("ACAO 31");
                                endereco1 = tabela.pilha_desvios.get();
                                instrucao = tabela.area_instrucoes.get(endereco1-1);
                                instrucao.parametro = String.valueOf(tabela.ponteiro + 1);
                                
                                
                                endereco2 = tabela.pilha_desvios.get();
                                instrucao = new Instrucao(tabela.ponteiro, "JMP", String.valueOf(endereco2));
                                tabela.area_instrucoes.add(instrucao);
                                
                                tabela.ponteiro++;                                
                                
                                
                                break;

                        case(32):
                                //System.out.println("ACAO 32");
                                instrucao = new Instrucao(tabela.ponteiro, "EQL", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(33):
                                //System.out.println("ACAO 33");
                                instrucao = new Instrucao(tabela.ponteiro, "DIF", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(34):
                                //System.out.println("ACAO 34");
                                instrucao = new Instrucao(tabela.ponteiro, "SMR", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(35):
                                //System.out.println("ACAO 35");
                                instrucao = new Instrucao(tabela.ponteiro, "BGR", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(36):
                                //System.out.println("ACAO 36");
                                instrucao = new Instrucao(tabela.ponteiro, "SME", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(37):
                                //System.out.println("ACAO 37");
                                instrucao = new Instrucao(tabela.ponteiro, "BGE", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(38):
                                //System.out.println("ACAO 38");
                                instrucao = new Instrucao(tabela.ponteiro, "ADD", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(39):
                                //System.out.println("ACAO 39");
                                instrucao = new Instrucao(tabela.ponteiro, "SUB", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(40):
                                //System.out.println("ACAO 40");
                                instrucao = new Instrucao(tabela.ponteiro, "OR", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(41):
                                //System.out.println("ACAO 41");
                                instrucao = new Instrucao(tabela.ponteiro, "MUL", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(42):
                                //System.out.println("ACAO 42");
                                instrucao = new Instrucao(tabela.ponteiro, "DIR", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(43):
                                //System.out.println("ACAO 43");
                                instrucao = new Instrucao(tabela.ponteiro, "DIV", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(44):
                                //System.out.println("ACAO 44");
                                instrucao = new Instrucao(tabela.ponteiro, "MOD", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(45):
                                //System.out.println("ACAO 45");
                                instrucao = new Instrucao(tabela.ponteiro, "AND", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(46):
                                //System.out.println("ACAO 46");
                                instrucao = new Instrucao(tabela.ponteiro, "POW", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(47):
                                //System.out.println("ACAO 47");
                                instrucao = new Instrucao(tabela.ponteiro, "LDB", "true");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(48):
                                //System.out.println("ACAO 48");
                                instrucao = new Instrucao(tabela.ponteiro, "LDB", "false");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        case(49):
                                //System.out.println("ACAO 49");
                                instrucao = new Instrucao(tabela.ponteiro, "NOT", "0");
                                tabela.area_instrucoes.add(instrucao);
                                tabela.ponteiro++;                                
                                break;

                        default:
                                System.out.println("ACAO default");
                                break;
                }
  }


  /** Generated Token Manager. */
  public Analisador_LexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x10000,0x40000,0x780000,0x0,0x780000,0x40000,0x780000,0x200,0x200,0x20,0x0,0x77000000,0x77000000,0x200,0x0,0x5000,0x1000,0x4000,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2880,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100000,0x10000,0x1000000,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x700000,0x0,0x0,0x0,0x1700000,0x0,0x0,0x0,0x0,0xf300,0xf300,0x460,0x460,0x9e,0x9e,0x800,0x1700001,};
   }

  /** Constructor with InputStream. */
  public Analisador_Lexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisador_Lexico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Analisador_LexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisador_Lexico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Analisador_LexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisador_Lexico(Analisador_LexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Analisador_LexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
